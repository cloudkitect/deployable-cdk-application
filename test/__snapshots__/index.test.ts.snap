// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`No stack pattern release workflow 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
      tag_exists: \${{ steps.check_tag_exists.outputs.exists }}
    env:
      CI: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: "9"
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: pnpm i --frozen-lockfile
      - name: release
        run: npx projen release
      - name: Check if version has already been tagged
        id: check_tag_exists
        run: |-
          TAG=$(cat dist/releasetag.txt)
          ([ ! -z "$TAG" ] && git ls-remote -q --exit-code --tags origin $TAG && (echo "exists=true" >> $GITHUB_OUTPUT)) || (echo "exists=false" >> $GITHUB_OUTPUT)
          cat $GITHUB_OUTPUT
      - name: Check for new commits
        id: git_remote
        run: |-
          echo "latest_commit=$(git ls-remote origin -h \${{ github.ref }} | cut -f1)" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
      - name: Backup artifact permissions
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: cd dist && getfacl -R . > permissions-backup.acl
        continue-on-error: true
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: dist
          overwrite: true
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.tag_exists != 'true' && needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 14.18.1
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist
      - name: Restore build artifact permissions
        run: cd dist && setfacl --restore=permissions-backup.acl
        continue-on-error: true
      - name: Release
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.sha }}
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q "Release.tag_name already exists" $errout; then cat $errout; exit $exitcode; fi
  deploy_to_Dev:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: write
      deployments: read
      id-token: write
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      - name: Get latest tag
        id: get_tag
        run: |-
          CURRENT_TAG=$(git describe --tags --abbrev=0 2>/dev/null)
          echo "CURRENT_TAG=$CURRENT_TAG" >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: \${{ env.CURRENT_TAG }}
          fetch-depth: 0
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: "9"
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: pnpm i --frozen-lockfile
      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: role
          aws-region: us-east-1
          role-session-name: DevSession
      - name: Deployment to Dev
        run: pnpm deploy:Dev
  deploy_to_Prod:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: write
      deployments: read
      id-token: write
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      - name: Get latest tag
        id: get_tag
        run: |-
          CURRENT_TAG=$(git describe --tags --abbrev=0 2>/dev/null)
          echo "CURRENT_TAG=$CURRENT_TAG" >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: \${{ env.CURRENT_TAG }}
          fetch-depth: 0
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: \${{ secrets.APP_ID }}
          private_key: \${{ secrets.APP_PRIVATE_KEY }}
      - name: Wait for approval
        uses: trstringer/manual-approval@v1
        with:
          secret: \${{ steps.generate_token.outputs.token }}
          minimum-approvals: 1
          issue-title: Deployment approval for \${{ env.CURRENT_TAG }} to Prod
          issue-body: Please approve or deny the deployment of version \${{ env.CURRENT_TAG }} toNaN
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: "9"
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: pnpm i --frozen-lockfile
      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: role2
          aws-region: us-east-1
          role-session-name: ProdSession
      - name: Deployment to Prod
        run: pnpm deploy:Prod
"
`;
